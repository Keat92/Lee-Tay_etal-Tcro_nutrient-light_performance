#extract by time point, first day 150
emms_sgr_d180<- emmeans(glmm_sgr, pairwise ~ light*nutrient*poly(time_days,2), at = list(time_days = 180), type ="response", adjust = "bonferroni")
#load
load(file="output/growth_rates.RData")
#extract by time point, first day 150
emms_sgr_d150<- emmeans(glmm_sgr, pairwise ~ light*nutrient*poly(time_days,2), at = list(time_days = 150), type ="response", adjust = "bonferroni")
#extract by time point, first day 180
emms_sgr_d180<- emmeans(glmm_sgr, pairwise ~ light*nutrient*poly(time_days,2), at = list(time_days = 180), type ="response", adjust = "bonferroni")
emms_sgr180 <- cld(emms_sgr_d180, alpha=0.05, Letters=letters, adjust="bonferroni")
View(emms_sgr180)
#extract by time point, first day 240
emms_sgr_d240<- emmeans(glmm_sgr, pairwise ~ light*nutrient*poly(time_days,2), at = list(time_days = 240), type ="response", adjust = "bonferroni")
emms_sgr240 <- cld(emms_sgr_d240, alpha=0.05, Letters=letters, adjust="bonferroni")
View(emms_sgr240)
#extract by time point, first day 240
emms_sgr_d400<- emmeans(glmm_sgr, pairwise ~ light*nutrient*poly(time_days,2), at = list(time_days = 400), type ="response", adjust = "bonferroni")
emms_sgr400 <- cld(emms_sgr_d400, alpha=0.05, Letters=letters, adjust="bonferroni")
View(emms_sgr400)
View(growth_rate_changes_long)
library(tidyverse)
library(readxl)
library(ggsci)#for publication ready color palette
data3 <- read_excel("C:/Users/yukin/Desktop/My Work/My Research/Manuscripts/M6. Tcro_CEA/2. DataAnalysis/Tcro_CEA/analysis_data1.xlsx", sheet = "mortality")#for survival summarize
data3 <- data3 %>%
mutate(survive = (end/20)*100)
data3 %>% group_by(light, nutrient) %>%
summarise(mean = mean(survive))
#load chl_a and cell density data
chl_a <- read_excel("C:/Users/yukin/Desktop/My Work/My Research/Manuscripts/M6. Tcro_CEA/2. DataAnalysis/Tcro_CEA/analysis_data2.xlsx", sheet = "chl-a")
cell_density <- read_excel("C:/Users/yukin/Desktop/My Work/My Research/Manuscripts/M6. Tcro_CEA/2. DataAnalysis/Tcro_CEA/analysis_data2.xlsx", sheet = "cell_density")
load(file="output/shell_morpho3.RData")
#join chl_a and cell density to shell_morpho3
metric_all<- shell_morpho3 %>%
left_join(cell_density, by=c("tank","clam")) %>%
left_join(chl_a, by=c("tank","clam"))
load(file="output/growth_metric_all.RData")
#log10 transformation
metric_all <- metric_all %>%
mutate(log_cell_count = log10(cell_count))
View(metric_all)
#describe the cell count and chl-a
metric_all %>%
group_by(light, nutrient)%>%
describe()
library(dlookr)
#describe the cell count and chl-a
metric_all %>%
group_by(light, nutrient)%>%
describe()
#describe the cell count and chl-a
metric_all %>%
group_by(light, nutrient)%>%
describe() %>%
filter(chl_a, log_cell_count)
#describe the cell count and chl-a
metric_all %>%
group_by(light, nutrient)%>%
describe() %>%
filter_at(chl_a, log_cell_count)
#describe the cell count and chl-a
metric_all %>%
group_by(light, nutrient)%>%
describe() %>%
filter_(chl_a, log_cell_count)
#describe the cell count and chl-a
metric_all %>%
group_by(light, nutrient)%>%
describe()
#describe the cell count and chl-a
metric_all %>%
group_by(light, nutrient)%>%
describe() %>%
filter(described_variables == c("log_cell_count", "chl_a"))
#describe the cell count and chl-a
metric_all %>%
group_by(light, nutrient)%>%
describe() %>%
filter(described_variables == "log_cell_count")
#describe the cell count and chl-a
metric_all %>%
group_by(light, nutrient)%>%
describe() %>%
filter(described_variables == "cell_count")
library(readxl)
reproduction_data <- read_excel("C:/Users/yukin/Downloads/Chuen_data/reproduction_data.xlsx")
View(reproduction_data)
str(reproduction_data)
View(reproduction_data)
reproduction_data <- reproduction_data %>%
mutate(location = as.factor(location)) %>%
mutate(colonies = as.factor(colonies)) %>%
mutate(oogenesis_stage = as.factor(oogenesis_stage))%>%
mutate(spawning_status = as.factor(spawning_status))
library(tidyverse)
reproduction_data <- reproduction_data %>%
mutate(location = as.factor(location)) %>%
mutate(colonies = as.factor(colonies)) %>%
mutate(oogenesis_stage = as.factor(oogenesis_stage))%>%
mutate(spawning_status = as.factor(spawning_status))
str(reproduction_data)
reproduction_data <- reproduction_data %>%
mutate(location = as.factor(location)) %>%
mutate(colonies = as.factor(colonies)) %>%
mutate(oogenesis_stage = as.factor(oogenesis_stage))%>%
mutate(spawning_status = as.factor(spawning_status))%>%
mutate(date = as.factor(date))
str(reproduction_data)
plot1 <- ggplot(reproduction_data, aes(x = egg_size, y = date, fill = location) +
scale_fill_viridis_c(name = "location", option = "C")
plot1
scale_fill_viridis_c(name = "location", option = "C")
plot1 <- ggplot(reproduction_data,
aes(x = egg_size, y = date, fill = location) +
geom_density_ridges_gradient(rel_min_height = 0.01) + scale_fill_viridis_c(name = "location", option = "C"))
library(ggridges)
plot1 <- ggplot(reproduction_data,
aes(x = egg_size, y = date, fill = location) +
geom_density_ridges_gradient(rel_min_height = 0.01) + scale_fill_viridis_c(name = "location", option = "C"))
plot1 <- ggplot(reproduction_data,
aes(x = egg_size, y = date, fill = location)) +
geom_density_ridges_gradient(rel_min_height = 0.01) + scale_fill_viridis_c(name = "location", option = "C")
plot1
plot1 <- ggplot(reproduction_data,
aes(x = egg_size, y = date, fill = location)) +
geom_density_ridges_gradient(rel_min_height = 0.01) + scale_fill_viridis_c(discrete= TRUE, name = "location", option = "C")
plot1 <- ggplot(reproduction_data,
aes(x = egg_size, y = date, fill = location)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
scale_fill_viridis(discrete = TRUE,
option = "C",
aesthetics = "fill")
library(viridis)
plot1 <- ggplot(reproduction_data,
aes(x = egg_size, y = date, fill = location)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
scale_fill_viridis(discrete = TRUE,
option = "C",
aesthetics = "fill")
plot1
library(hrbrthemes)
plot1 <- ggplot(reproduction_data,
aes(x = egg_size, y = date, fill = location)) +
geom_density_ridges_gradient(rel_min_height = 0.01) +
scale_fill_viridis(discrete = TRUE,
option = "C",
aesthetics = "fill")+
theme_ipsum()
plot1
plot1 <- ggplot(reproduction_data,
aes(x = egg_size, y = date, fill = location)) +
geom_density_ridges_gradient(rel_min_height = 0.01, alpha = 0.5) +
scale_fill_viridis(discrete = TRUE,
option = "C",
aesthetics = "fill")
plot1
library(tidyverse)
library(readxl)
dat1 <- read_excel("C:/Users/yukin/Desktop/My Work/My Research/Project/P2.BleachingSurvey2024/BleachingSurvey2024.xlsx",
sheet = "surveys", col_types = c("text",
"text", "text", "numeric", "text",
"numeric"))
View(dat1)
summary_data <- data %>%
group_by(site_code) %>%
summarise(
total_colonies = n(),  # Total number of colonies surveyed
bleaching_count = sum(bleaching_score %in% c(2, 3)),  # Colonies with bleaching scores
mortality_count = sum(bleaching_score %in% c(4, 5)),  # Colonies with mortality scores
bleaching_percentage = (bleaching_count / total_colonies) * 100,  # Calculate bleaching percentage
mortality_percentage = (mortality_count / total_colonies) * 100   # Calculate mortality percentage
)
str(dat1)
#Convert site_code, transect, and bleaching_score to factors
dat1 <- dat1 %>%
mutate(
site_code = as.factor(site_code),
transect = as.factor(transect),
bleaching_score = as.factor(bleaching_score))
str(dat1)
dat1 <- read_excel("C:/Users/yukin/Desktop/My Work/My Research/Project/P2.BleachingSurvey2024/BleachingSurvey2024.xlsx",
+     sheet = "surveys", col_types = c("text",
dat1 <- read_excel("C:/Users/yukin/Desktop/My Work/My Research/Project/P2.BleachingSurvey2024/BleachingSurvey2024.xlsx",
sheet = "surveys")
#Convert site_code, transect, and bleaching_score to factors
dat1 <- dat1 %>%
mutate(
site_code = as.factor(site_code),
transect = as.factor(transect),
bleaching_score = as.factor(bleaching_score))
str(dat1)
summary_data <- dat1 %>%
group_by(site_code) %>%
summarise(
total_colonies = n(),  # Total number of colonies surveyed
bleaching_count = sum(bleaching_score %in% c(2, 3)),  # Colonies with bleaching scores
mortality_count = sum(bleaching_score %in% c(4, 5)),  # Colonies with mortality scores
bleaching_percentage = (bleaching_count / total_colonies) * 100,  # Calculate bleaching percentage
mortality_percentage = (mortality_count / total_colonies) * 100   # Calculate mortality percentage
)
View(summary_data)
summary_data <- dat1 %>%
group_by(site_code) %>%
summarise(
total_colonies = n(),  # Total number of colonies surveyed
bleaching_count = sum(bleaching_score %in% c(2, 3)),  # Colonies with bleaching scores
mortality_count = sum(bleaching_score %in% c(4, 5)),  # Colonies with mortality scores
bleaching_percentage = (bleaching_count / total_colonies) * 100,  # Calculate bleaching percentage
mortality_percentage = (mortality_count / total_colonies) * 100   # Calculate mortality percentage
full_mortality_count = sum(bleaching_score %in% c(5)),  # Colonies with mortality scores 5
summary_data <- dat1 %>%
group_by(site_code) %>%
summarise(
total_colonies = n(),  # Total number of colonies surveyed
bleaching_count = sum(bleaching_score %in% c(2, 3)),  # Colonies with bleaching scores
mortality_count = sum(bleaching_score %in% c(4, 5)),  # Colonies with mortality scores
bleaching_percentage = (bleaching_count / total_colonies) * 100,  # Calculate bleaching percentage
mortality_percentage = (mortality_count / total_colonies) * 100,   # Calculate mortality percentage
full_mortality_count = sum(bleaching_score %in% c(5)),  # Colonies with mortality scores 5
full_mortality_percentage = (full_mortality_count / total_colonies) * 100   # Calculate mortality percentage
)
install.packages("rerddap")
library(rerddap)
library(rerddap)
library(lubridate)
#| echo: false
#| # Load libraries
library(tidyverse)
library(reshape2)
getwd()
workshop_survey <- read.csv("C:/Users/yukin/Desktop/MyWork2025/PJ9. GiantClamWorkshop_DoF/Final_report/workshop_survey.csv")
View(workshop_survey)
getwd()
# Step 1: Read data (update path if using a CSV or copied data from Google Sheets)
# Assuming you save the data as "giant_clam_threats.csv"
setwd("C:/Users/yukin/Desktop/MyWork2025/PJ9. GiantClamWorkshop_DoF/Final_report)
# Step 1: Read data (update path if using a CSV or copied data from Google Sheets)
# Assuming you save the data as "giant_clam_threats.csv"
getwd()
setwd("C:/Users/yukin/Desktop/MyWork2025/PJ9. GiantClamWorkshop_DoF/Final_report")
getwd()
setwd("C:/Users/yukin/Desktop/MyWork2025/PJ9. GiantClamWorkshop_DoF/Final_report")
df <- read.csv("workshop_survey.csv", header = TRUE)
df <- read.csv("workshop_survey.csv", header = TRUE)
View(df)
View(df)
str(df)
# Step 2: Rename columns if needed
colnames(df) <- c("Illegal consumption", "Illegal for trade", "Habitat destruction", "Bleaching due climate change", "Lack conservation awareness")
View(df)
# Step 3: Convert to long format
df_long <- df %>%
mutate(Participant = row_number()) %>%
pivot_longer(cols = -Participant, names_to = "Threat", values_to = "Rating")
View(df_long)
# Step 4: Count percentage of each rating per threat
summary_df <- df_long %>%
group_by(Threat, Rating) %>%
summarise(Count = n()) %>%
group_by(Threat) %>%
mutate(Percentage = Count / sum(Count) * 100)
# Step 5: Create diverging values for visualization
summary_df <- summary_df %>%
mutate(Direction = case_when(
Rating %in% c(1, 2) ~ -Percentage,
TRUE ~ Percentage
),
Rating = factor(Rating, levels = 1:5))
# Step 6: Plot the diverging stacked bar chart
ggplot(summary_df, aes(x = Direction, y = fct_rev(Threat), fill = Rating)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = 0, color = "gray50", linetype = "dashed") +
scale_fill_brewer(palette = "RdYlBu", direction = -1) +
labs(
title = "Perceived Threat Levels to Giant Clams in Malaysia",
x = "Percentage of Participants",
y = "Threats",
fill = "Rating\n(1 = Critical, 5 = Least Concern)"
) +
theme_minimal() +
theme(legend.position = "right")
# Step 6: Plot the diverging stacked bar chart
plot1<- ggplot(summary_df, aes(x = Direction, y = fct_rev(Threat), fill = Rating)) +
geom_bar(stat = "identity") +
geom_vline(xintercept = 0, color = "gray50", linetype = "dashed") +
scale_fill_brewer(palette = "RdYlBu", direction = -1) +
labs(
title = "Perceived Threat Levels to Giant Clams in Malaysia",
x = "Percentage of Participants",
y = "Threats",
fill = "Rating\n(1 = Critical, 5 = Least Concern)"
) +
theme_minimal() +
theme(legend.position = "right")
plot1
df <- read.csv("workshop_survey.csv", header = TRUE)
# Step 2: Rename columns if needed
colnames(df) <- c("Illegal consumption", "Illegal for trade", "Habitat destruction", "Bleaching due climate change", "Lack conservation awareness")
# Step 3: Convert to long format
df_long <- df %>%
mutate(Participant = row_number()) %>%
pivot_longer(cols = -Participant, names_to = "Threat", values_to = "Rating")
# Step 4: Calculate average score per threat
threat_avg <- df_long %>%
group_by(Threat) %>%
summarise(Average_Score = mean(Rating)) %>%
arrange(Average_Score)  # Lower = more critical
# Step 5: Plot horizontal bar chart
plot1 <- ggplot(threat_avg, aes(x = Average_Score, y = fct_reorder(Threat, Average_Score))) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_text(aes(label = round(Average_Score, 2)), hjust = -0.1) +
labs(
title = "Average Concern Rating for Giant Clam Threats",
x = "Average Score (1 = Critical, 5 = Least Concern)",
y = "Threats"
) +
theme_minimal() +
xlim(1, 5.5)  # Optional: pad x-axis for labels
plot1
View(df_long)
# Step 3: Convert to long format
df_long <- df %>%
mutate(Participant = row_number()) %>%
pivot_longer(cols = -Participant, names_to = "Threat", values_to = "Rating") %>%
filter(!is.na(Rating))  # <- Remove NA values
# Step 4: Calculate average rating
threat_avg <- df_long %>%
group_by(Threat) %>%
summarise(Average_Score = mean(Rating, na.rm = TRUE)) %>%
mutate(Threat = fct_reorder(Threat, Average_Score))
# Step 5: Plot horizontal bar chart
ggplot(threat_avg, aes(x = Average_Score, y = Threat)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = round(Average_Score, 2)), hjust = -0.1) +
labs(
title = "Average Concern Rating for Giant Clam Threats",
x = "Average Score (1 = Critical, 5 = Least Concern)",
y = "Threats"
) +
theme_minimal() +
xlim(1, 5.5)  # Optional padding for label readability
# Step 5: Plot horizontal bar chart
plot1<-ggplot(threat_avg, aes(x = Average_Score, y = Threat)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = round(Average_Score, 2)), hjust = -0.1) +
labs(
title = "Average Concern Rating for Giant Clam Threats",
x = "Average Score (1 = Critical, 5 = Least Concern)",
y = "Threats"
) +
theme_minimal() +
xlim(1, 5.5)  # Optional padding for label readability
plot1
View(df)
library(tidyverse)
library(ggtext)
library(ggpubr)
library(ggsci)
library(dlookr)
library(rstatix)
library(lme4)
library(readxl)
library(emmeans)
library(patchwork)
library(gtsummary)
library(car)
library(sjPlot)
growth_SL <- read_excel("C:/Users/yukin/Desktop/MyWork2025/M6. Tcro_CEA/2. DataAnalysis/analysis_data2.xlsx", sheet = "growth_SL")
# Growth trend
# Use SL as proxy
growth_SL <- read_excel("C:/Users/yukin/Desktop/MyWork2025/M6. Tcro_CEA/2. DataAnalysis/Tcro_CEA/analysis_data2.xlsx", sheet = "growth_SL")
# Make sure all the variable is read as factor
growth_SL <- growth_SL %>%
mutate_at(vars(tank, light, nutrient), as.factor)
# Pivot long, and change D1...D176 to days
growth_SL_long <- growth_SL %>%
pivot_longer(cols = starts_with("D"),
names_to = "time_days", values_to = "SL") %>%
mutate(time_days = str_extract(time_days, "\\d+") %>% as.numeric())
#facet wrap by light, compare between nutrient
plot1 <-ggplot(growth_SL_long, aes(x=time_days, y=SL,
color=nutrient))+
geom_jitter(alpha=0.2)+
geom_smooth(method = glm, method.args = list(family = "Gamma"))+
facet_wrap(~light)+
scale_color_npg() +
labs(y= "ShLength (mm)", x = "Time (days)")+
theme_pubr()+
theme(legend.position = c(0.9,0.2))+
stat_regline_equation(aes(label =  paste(..adj.rr.label.., sep = "~~~~")))
plot1
knitr::opts_chunk$set(echo = TRUE)
#load data
growth_SL <- read_excel("C:/Users/yukin/Desktop/MyWork2025/M6. Tcro_CEA/2. DataAnalysis/Tcro_CEA/analysis_data2.xlsx", sheet = "growth_SL")
knitr::opts_chunk$set(echo = TRUE)
# Make sure all the variable is read as factor
growth_SL <- growth_SL %>%
mutate_at(vars(tank, light, nutrient), as.factor)
#pivot long, and change D1...D176 to days
growth_SL_long <- growth_SL %>%
pivot_longer(cols = starts_with("D"),
names_to = "time_days", values_to = "SL") %>%
mutate(time_days = str_extract(time_days, "\\d+") %>% as.numeric())
#Fig2a: facet wrap by light, compare between nutrient
plot1 <-ggplot(growth_SL_long, aes(x=time_days, y=SL,
color=nutrient))+
geom_jitter(alpha=0.2)+
geom_smooth(method = glm, method.args = list(family = "Gamma"))+
facet_wrap(~light)+
scale_color_npg() +
labs(y= "ShLength (mm)", x = "Time (days)")+
theme_pubr()+
theme(legend.position = c(0.9,0.2))+
stat_regline_equation(aes(label =  paste(..adj.rr.label.., sep = "~~~~")))
plot1
# SL growth trend vs time
allometric_list  <- list(
glm1<- glm(SL ~ time_days, data = growth_SL_long, subset = (light == "PAR250" & nutrient == "Ambient")),
glm2<- glm(SL ~ time_days, data = growth_SL_long, subset = (light == "PAR250" & nutrient == "Enriched")),
glm3<- glm(SL ~ time_days, data = growth_SL_long, subset = (light == "PAR350" & nutrient == "Ambient")),
glm4<- glm(SL ~ time_days, data = growth_SL_long, subset = (light == "PAR350" & nutrient == "Enriched")),
glm5<- glm(SL ~ time_days, data = growth_SL_long, subset = (light == "PAR450" & nutrient == "Ambient")),
glm6<- glm(SL ~ time_days, data = growth_SL_long, subset = (light == "PAR450" & nutrient == "Enriched")))
#calculate confidence interval
confint_list <- lapply(allometric_list, confint)
confint_list
load(file="output/growth_SL_long.RData")
# Save data
save(growth_SL_long, file="output/growth_SL_long.RData")
#load data
growth_SL <- read_excel("C:/Users/yukin/Desktop/MyWork2025/M6. Tcro_CEA/2. DataAnalysis/Tcro_CEA/analysis_data2.xlsx", sheet = "growth_SL")
# Make sure all the variable is read as factor
growth_SL <- growth_SL %>%
mutate_at(vars(tank, light, nutrient), as.factor)
#pivot long, and change D1...D176 to days
growth_SL_long <- growth_SL %>%
pivot_longer(cols = starts_with("D"),
names_to = "time_days", values_to = "SL") %>%
mutate(time_days = str_extract(time_days, "\\d+") %>% as.numeric())
# Save data
save(growth_SL_long, file="output/growth_SL_long.RData")
# Save data
save(growth_SL_long, file="temp_output/growth_SL_long.RData")
setwd(C:/Users/yukin/Documents/GitHub/Lee-Tay_etal-Tcro_nutrient-light_performance/analyses)
setwd("C:/Users/yukin/Documents/GitHub/Lee-Tay_etal-Tcro_nutrient-light_performance/analyses")
# Save data
save(growth_SL_long, file="temp_output/growth_SL_long.RData")
#load data
pam <- read_excel("C:/Users/yukin/Desktop/MyWork2025/M6. Tcro_CEA/2. DataAnalysis/Tcro_CEA/analysis_data2.xlsx", sheet = "PAM")
#add new column to indicate number of days since day 0
day_0 <- as.Date('2023-08-10')
pam$date <- as.Date(pam$date)
pam <- pam %>%
mutate(time_days = as.numeric(date - day_0))
# Format the intended variables into factor level
pam <- pam %>%
mutate_at(vars(tank, light, nutrient), as.factor)
# Save
save(pam, file="temp_output/pam.RData")
#Fig5a: Plot pam graph
plot2 <-ggplot(pam, aes(x=time_days, y=Y2,
color=nutrient))+
geom_jitter(alpha=0.2)+
geom_smooth(method = "loess")+
scale_color_npg() +
facet_wrap(~light)+
labs(y= "Fv/Fm", x = "Time (days)")+
theme_pubr()+
theme(legend.position = c(0.9,0.9)) +
stat_regline_equation(aes(label =  paste(..adj.rr.label.., sep = "~~~~")))
plot2
# Load data
growth_SL <- read_excel("C:/Users/yukin/Desktop/MyWork2025/M6. Tcro_CEA/2. DataAnalysis/Tcro_CEA/analysis_data2.xlsx", sheet = "growth_SL")
# Summarise across D0 to D176 to calculate specific growth rate
mean_growth_SL <- growth_SL %>%
group_by(tank, light, nutrient) %>%
summarise(across(D1:D176,\(x) round(mean(x, na.rm= TRUE),3))) %>%
ungroup()
# Save R data
save(mean_growth_SL, file ="_temp_output/mean_growth_SL.RData")
# Save R data
save(mean_growth_SL, file="temp_output/mean_growth_SL.RData")
# Calculate growth rate changes over time
growth_rate_changes <- mean_growth_SL %>%
mutate(t_14=((log(D14)-log(D1))/14)*100) %>%
mutate(t_28=((log(D28)-log(D1))/28)*100) %>%
mutate(t_42=((log(D42)-log(D1))/42)*100) %>%
mutate(t_56=((log(D56)-log(D1))/56)*100) %>%
mutate(t_70=((log(D70)-log(D1))/70)*100) %>%
mutate(t_98=((log(D98)-log(D1))/98)*100) %>%
mutate(t_126=((log(D126)-log(D1))/126)*100) %>%
mutate(t_154=((log(D154)-log(D1))/154)*100) %>%
mutate(t_176=((log(D176)-log(D1))/178)*100) %>%
select(tank:nutrient, t_14:t_176)
#pivot long and convert the t_14 and etc, to respective time in days
growth_rate_changes_long <- growth_rate_changes %>%
pivot_longer(cols = starts_with("t_"),
names_to = "time_days", values_to = "sgr_t") %>%
mutate(time_days = str_extract(time_days, "\\d+") %>% as.numeric())
#
save(growth_rate_changes_long, file="temp_output/growth_rates.RData")
#Fig3a: Plot specific growth rates
plot3 <-ggplot(growth_rate_changes_long, aes(x=time_days, y=sgr_t,
color=nutrient))+
geom_jitter(alpha=0.2)+
geom_smooth(method = glm, method.args = list(family = "Gamma"))+
facet_wrap(~light)+
scale_color_npg() +
labs(y= "SGR (% day-1)", x = "Time (days)")+
theme_pubr()+
theme(legend.position = c(0.7,0.7)) +
stat_regline_equation(aes(label =  paste(..adj.rr.label.., sep = "~~~~")))
plot3
